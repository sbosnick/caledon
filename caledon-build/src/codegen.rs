// Copyright 2020 Steven Bosnick
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE-2.0 or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

use std::io::Write;

use quote::quote;
use proc_macro2::TokenStream;

use crate::{model::Protocol, Error, Result};

pub fn generate_code<'a, W, I>(mut file: W, protocols: I) -> Result<()>
where
    W: Write,
    I: Iterator<Item = &'a Protocol>+Clone,
{
    writeln!(file, "// File generated by caledon-build from the following input files:")
        .map_err(Error::file_write)?;
    for protocol in protocols.clone() {
        writeln!(file, "//     {}", protocol.path().display())
            .map_err(Error::file_write)?;
    }

    let modules = protocols.map(generate_protocol);

    let output = quote! {
        #(#modules)*
    };

    write!(file, "{}", output).map_err(Error::file_write)
}

fn generate_protocol(protocol: &Protocol) -> TokenStream {
    let mod_ident = protocol.mod_ident();
    let doc = protocol.description()
        .map_or_else(
            || format!("caledon types for {} protocol", protocol.name()),
            |desc| {
                let mut s = desc.summary().to_owned();
                if let Some(detail) = desc.detail() {
                    s += "\n";
                    s += detail;
                }
                s
            });

    quote! {
        #[doc = #doc]
        pub mod #mod_ident {
        }
    }
}
